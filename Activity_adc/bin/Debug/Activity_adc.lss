
bin\Debug\Activity_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000024c  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001aa  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000324  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000120  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002b  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ADC>:
#include <avr/io.h>
#include <util/delay.h>

void init_ADC()
{   ADMUX=(1<<REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24

}
  8c:	08 95       	ret

0000008e <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
    //select adc channel
    ADMUX &= 0xf8;
  8e:	90 91 7c 00 	lds	r25, 0x007C
  92:	98 7f       	andi	r25, 0xF8	; 248
  94:	90 93 7c 00 	sts	0x007C, r25
    ch=ch&0b00000111;
    ADMUX |= ch;
  98:	90 91 7c 00 	lds	r25, 0x007C
  9c:	87 70       	andi	r24, 0x07	; 7
  9e:	89 2b       	or	r24, r25
  a0:	80 93 7c 00 	sts	0x007C, r24
    //Start conversion
    ADCSRA |= (1<<ADSC);
  a4:	80 91 7a 00 	lds	r24, 0x007A
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 93 7a 00 	sts	0x007A, r24
    //wait for conversion
    while(!(ADCSRA & (1<<ADIF)));
  ae:	80 91 7a 00 	lds	r24, 0x007A
  b2:	84 ff       	sbrs	r24, 4
  b4:	fc cf       	rjmp	.-8      	; 0xae <ReadADC+0x20>
    ADCSRA |= (1<<ADIF);
  b6:	80 91 7a 00 	lds	r24, 0x007A
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 93 7a 00 	sts	0x007A, r24
    return (ADC);
  c0:	20 91 78 00 	lds	r18, 0x0078
  c4:	30 91 79 00 	lds	r19, 0x0079

}
  c8:	c9 01       	movw	r24, r18
  ca:	08 95       	ret

000000cc <init_port>:

void init_port()
{
     DDRD &= ~(1<<PD0);     //Make PORTD0 as input pin
  cc:	50 98       	cbi	0x0a, 0	; 10
     DDRC &= ~(1<<PC0);     // Make PORTC0 as input pin
  ce:	38 98       	cbi	0x07, 0	; 7
     DDRD |= (1<<PD6);      // set PD6 for output
  d0:	56 9a       	sbi	0x0a, 6	; 10
     DDRB |= (1<<PB1);      //Make PORTB1 as output pin
  d2:	21 9a       	sbi	0x04, 1	; 4
}
  d4:	08 95       	ret

000000d6 <main>:


int main(void)
{
    TCCR0A |= (1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
  d6:	84 b5       	in	r24, 0x24	; 36
  d8:	83 68       	ori	r24, 0x83	; 131
  da:	84 bd       	out	0x24, r24	; 36
    // Fast PWM - Non inverting mode of pin PD6
    TCCR0B |= (1<<CS00);
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	85 bd       	out	0x25, r24	; 37
    // no prescaler

    init_port();
  e2:	0e 94 66 00 	call	0xcc	; 0xcc <init_port>
#include <avr/io.h>
#include <util/delay.h>

void init_ADC()
{   ADMUX=(1<<REFS0);
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
  ec:	87 e8       	ldi	r24, 0x87	; 135
  ee:	80 93 7a 00 	sts	0x007A, r24
    // no prescaler

    init_port();
    init_ADC();
   //uint16_t temp;
    PORTB = 0x00;
  f2:	15 b8       	out	0x05, r1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f4:	40 e9       	ldi	r20, 0x90	; 144
  f6:	51 e0       	ldi	r21, 0x01	; 1
                }
                else if(ADC > 510 && ADC < 700){
                    OCR0A = 178;
                }
                else if (ADC > 710 && ADC < 1024){
                    OCR0A = 242;
  f8:	62 ef       	ldi	r22, 0xF2	; 242
                }
                else if(ADC > 210 && ADC < 500){
                    OCR0A = 101;
                }
                else if(ADC > 510 && ADC < 700){
                    OCR0A = 178;
  fa:	72 eb       	ldi	r23, 0xB2	; 178
                // changing the duty cycle of waveform
                if (ADC>0 && ADC<200){
                    OCR0A = 51;
                }
                else if(ADC > 210 && ADC < 500){
                    OCR0A = 101;
  fc:	e5 e6       	ldi	r30, 0x65	; 101
                PORTB |= (1<<PB1);
                ReadADC(0);

                // changing the duty cycle of waveform
                if (ADC>0 && ADC<200){
                    OCR0A = 51;
  fe:	f3 e3       	ldi	r31, 0x33	; 51
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x34>

                _delay_ms(200);
            }

        else
            ADCH=0x00;
 102:	10 92 79 00 	sts	0x0079, r1
            ADCL=0x00;
 106:	10 92 78 00 	sts	0x0078, r1
    init_ADC();
   //uint16_t temp;
    PORTB = 0x00;
    while(1)
    {
        if( (PIND & (1<<PD0)) == 1 )
 10a:	48 9b       	sbis	0x09, 0	; 9
 10c:	fa cf       	rjmp	.-12     	; 0x102 <main+0x2c>
            {
                PORTB |= (1<<PB1);
 10e:	29 9a       	sbi	0x05, 1	; 5
}

uint16_t ReadADC(uint8_t ch)
{
    //select adc channel
    ADMUX &= 0xf8;
 110:	80 91 7c 00 	lds	r24, 0x007C
 114:	88 7f       	andi	r24, 0xF8	; 248
 116:	80 93 7c 00 	sts	0x007C, r24
    ch=ch&0b00000111;
    ADMUX |= ch;
 11a:	80 91 7c 00 	lds	r24, 0x007C
 11e:	80 93 7c 00 	sts	0x007C, r24
    //Start conversion
    ADCSRA |= (1<<ADSC);
 122:	80 91 7a 00 	lds	r24, 0x007A
 126:	80 64       	ori	r24, 0x40	; 64
 128:	80 93 7a 00 	sts	0x007A, r24
    //wait for conversion
    while(!(ADCSRA & (1<<ADIF)));
 12c:	80 91 7a 00 	lds	r24, 0x007A
 130:	84 ff       	sbrs	r24, 4
 132:	fc cf       	rjmp	.-8      	; 0x12c <main+0x56>
    ADCSRA |= (1<<ADIF);
 134:	80 91 7a 00 	lds	r24, 0x007A
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	80 93 7a 00 	sts	0x007A, r24
    return (ADC);
 13e:	80 91 78 00 	lds	r24, 0x0078
 142:	90 91 79 00 	lds	r25, 0x0079
            {
                PORTB |= (1<<PB1);
                ReadADC(0);

                // changing the duty cycle of waveform
                if (ADC>0 && ADC<200){
 146:	80 91 78 00 	lds	r24, 0x0078
 14a:	90 91 79 00 	lds	r25, 0x0079
 14e:	89 2b       	or	r24, r25
 150:	a1 f0       	breq	.+40     	; 0x17a <main+0xa4>
 152:	80 91 78 00 	lds	r24, 0x0078
 156:	90 91 79 00 	lds	r25, 0x0079
 15a:	88 3c       	cpi	r24, 0xC8	; 200
 15c:	91 05       	cpc	r25, r1
 15e:	68 f4       	brcc	.+26     	; 0x17a <main+0xa4>
                    OCR0A = 51;
 160:	f7 bd       	out	0x27, r31	; 39
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	ca 01       	movw	r24, r20
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x92>
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 170:	87 e0       	ldi	r24, 0x07	; 7
 172:	20 3d       	cpi	r18, 0xD0	; 208
 174:	38 07       	cpc	r19, r24
 176:	b9 f7       	brne	.-18     	; 0x166 <main+0x90>
 178:	c6 cf       	rjmp	.-116    	; 0x106 <main+0x30>
                }
                else if(ADC > 210 && ADC < 500){
 17a:	80 91 78 00 	lds	r24, 0x0078
 17e:	90 91 79 00 	lds	r25, 0x0079
 182:	83 3d       	cpi	r24, 0xD3	; 211
 184:	91 05       	cpc	r25, r1
 186:	58 f0       	brcs	.+22     	; 0x19e <main+0xc8>
 188:	80 91 78 00 	lds	r24, 0x0078
 18c:	90 91 79 00 	lds	r25, 0x0079
 190:	84 5f       	subi	r24, 0xF4	; 244
 192:	91 40       	sbci	r25, 0x01	; 1
 194:	20 f4       	brcc	.+8      	; 0x19e <main+0xc8>
                    OCR0A = 101;
 196:	e7 bd       	out	0x27, r30	; 39
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	e4 cf       	rjmp	.-56     	; 0x166 <main+0x90>
                }
                else if(ADC > 510 && ADC < 700){
 19e:	80 91 78 00 	lds	r24, 0x0078
 1a2:	90 91 79 00 	lds	r25, 0x0079
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	91 40       	sbci	r25, 0x01	; 1
 1aa:	58 f0       	brcs	.+22     	; 0x1c2 <main+0xec>
 1ac:	80 91 78 00 	lds	r24, 0x0078
 1b0:	90 91 79 00 	lds	r25, 0x0079
 1b4:	8c 5b       	subi	r24, 0xBC	; 188
 1b6:	92 40       	sbci	r25, 0x02	; 2
 1b8:	20 f4       	brcc	.+8      	; 0x1c2 <main+0xec>
                    OCR0A = 178;
 1ba:	77 bd       	out	0x27, r23	; 39
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	d2 cf       	rjmp	.-92     	; 0x166 <main+0x90>
                }
                else if (ADC > 710 && ADC < 1024){
 1c2:	80 91 78 00 	lds	r24, 0x0078
 1c6:	90 91 79 00 	lds	r25, 0x0079
 1ca:	87 5c       	subi	r24, 0xC7	; 199
 1cc:	92 40       	sbci	r25, 0x02	; 2
 1ce:	58 f0       	brcs	.+22     	; 0x1e6 <main+0x110>
 1d0:	80 91 78 00 	lds	r24, 0x0078
 1d4:	90 91 79 00 	lds	r25, 0x0079
 1d8:	80 50       	subi	r24, 0x00	; 0
 1da:	94 40       	sbci	r25, 0x04	; 4
 1dc:	20 f4       	brcc	.+8      	; 0x1e6 <main+0x110>
                    OCR0A = 242;
 1de:	67 bd       	out	0x27, r22	; 39
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	c0 cf       	rjmp	.-128    	; 0x166 <main+0x90>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	bd cf       	rjmp	.-134    	; 0x166 <main+0x90>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
